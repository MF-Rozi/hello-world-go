// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: albums.sql

package db

import (
	"context"
	"database/sql"
)

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO
    albums (title, artist, price)
VALUES ($1, $2, $3)
RETURNING
    id,
    title,
    artist,
    price
`

type CreateAlbumParams struct {
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Price  string `json:"price"`
}

type CreateAlbumRow struct {
	ID     int32  `json:"id"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Price  string `json:"price"`
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (CreateAlbumRow, error) {
	row := q.queryRow(ctx, q.createAlbumStmt, createAlbum, arg.Title, arg.Artist, arg.Price)
	var i CreateAlbumRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Price,
	)
	return i, err
}

const deleteAlbum = `-- name: DeleteAlbum :exec
DELETE FROM albums WHERE id = $1
`

func (q *Queries) DeleteAlbum(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteAlbumStmt, deleteAlbum, id)
	return err
}

const getAlbumByID = `-- name: GetAlbumByID :one
SELECT id, title, artist, price FROM albums WHERE id = $1
`

type GetAlbumByIDRow struct {
	ID     int32  `json:"id"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Price  string `json:"price"`
}

func (q *Queries) GetAlbumByID(ctx context.Context, id int32) (GetAlbumByIDRow, error) {
	row := q.queryRow(ctx, q.getAlbumByIDStmt, getAlbumByID, id)
	var i GetAlbumByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Price,
	)
	return i, err
}

const getAlbumByTitle = `-- name: GetAlbumByTitle :many
SELECT id, title, artist, price
FROM albums
WHERE
    title ILIKE '%' || $3 || '%'
ORDER BY id
LIMIT $1
OFFSET
    $2
`

type GetAlbumByTitleParams struct {
	Limit  int32          `json:"limit"`
	Offset int32          `json:"offset"`
	Title  sql.NullString `json:"title"`
}

type GetAlbumByTitleRow struct {
	ID     int32  `json:"id"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Price  string `json:"price"`
}

func (q *Queries) GetAlbumByTitle(ctx context.Context, arg GetAlbumByTitleParams) ([]GetAlbumByTitleRow, error) {
	rows, err := q.query(ctx, q.getAlbumByTitleStmt, getAlbumByTitle, arg.Limit, arg.Offset, arg.Title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumByTitleRow
	for rows.Next() {
		var i GetAlbumByTitleRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbums = `-- name: GetAlbums :many
SELECT id, title, artist, price
FROM albums
ORDER BY id
LIMIT $1
OFFSET
    $2
`

type GetAlbumsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAlbumsRow struct {
	ID     int32  `json:"id"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Price  string `json:"price"`
}

func (q *Queries) GetAlbums(ctx context.Context, arg GetAlbumsParams) ([]GetAlbumsRow, error) {
	rows, err := q.query(ctx, q.getAlbumsStmt, getAlbums, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumsRow
	for rows.Next() {
		var i GetAlbumsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumsByArtist = `-- name: GetAlbumsByArtist :many
SELECT id, title, artist, price
FROM albums
WHERE
    artist ILIKE '%' || $1 || '%'
ORDER BY id
LIMIT $2
OFFSET
    $3
`

type GetAlbumsByArtistParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

type GetAlbumsByArtistRow struct {
	ID     int32  `json:"id"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Price  string `json:"price"`
}

func (q *Queries) GetAlbumsByArtist(ctx context.Context, arg GetAlbumsByArtistParams) ([]GetAlbumsByArtistRow, error) {
	rows, err := q.query(ctx, q.getAlbumsByArtistStmt, getAlbumsByArtist, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumsByArtistRow
	for rows.Next() {
		var i GetAlbumsByArtistRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAlbumsByFullTextSearch = `-- name: GetAlbumsByFullTextSearch :many
SELECT id, title, artist, price
FROM albums
WHERE
    to_tsvector(
        'english',
        title || ' ' || artist
    ) @@ plainto_tsquery($1)
ORDER BY id
LIMIT $2
OFFSET
    $3
`

type GetAlbumsByFullTextSearchParams struct {
	PlaintoTsquery string `json:"plainto_tsquery"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

type GetAlbumsByFullTextSearchRow struct {
	ID     int32  `json:"id"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Price  string `json:"price"`
}

func (q *Queries) GetAlbumsByFullTextSearch(ctx context.Context, arg GetAlbumsByFullTextSearchParams) ([]GetAlbumsByFullTextSearchRow, error) {
	rows, err := q.query(ctx, q.getAlbumsByFullTextSearchStmt, getAlbumsByFullTextSearch, arg.PlaintoTsquery, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAlbumsByFullTextSearchRow
	for rows.Next() {
		var i GetAlbumsByFullTextSearchRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Artist,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlbum = `-- name: UpdateAlbum :one
UPDATE albums
SET
    title = $2,
    artist = $3,
    price = $4
WHERE
    id = $1
RETURNING
    id,
    title,
    artist,
    price
`

type UpdateAlbumParams struct {
	ID     int32  `json:"id"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Price  string `json:"price"`
}

type UpdateAlbumRow struct {
	ID     int32  `json:"id"`
	Title  string `json:"title"`
	Artist string `json:"artist"`
	Price  string `json:"price"`
}

func (q *Queries) UpdateAlbum(ctx context.Context, arg UpdateAlbumParams) (UpdateAlbumRow, error) {
	row := q.queryRow(ctx, q.updateAlbumStmt, updateAlbum,
		arg.ID,
		arg.Title,
		arg.Artist,
		arg.Price,
	)
	var i UpdateAlbumRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Artist,
		&i.Price,
	)
	return i, err
}
