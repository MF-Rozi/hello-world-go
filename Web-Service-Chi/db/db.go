// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAlbumStmt, err = db.PrepareContext(ctx, createAlbum); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAlbum: %w", err)
	}
	if q.deleteAlbumStmt, err = db.PrepareContext(ctx, deleteAlbum); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAlbum: %w", err)
	}
	if q.getAlbumByIDStmt, err = db.PrepareContext(ctx, getAlbumByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAlbumByID: %w", err)
	}
	if q.getAlbumByTitleStmt, err = db.PrepareContext(ctx, getAlbumByTitle); err != nil {
		return nil, fmt.Errorf("error preparing query GetAlbumByTitle: %w", err)
	}
	if q.getAlbumsStmt, err = db.PrepareContext(ctx, getAlbums); err != nil {
		return nil, fmt.Errorf("error preparing query GetAlbums: %w", err)
	}
	if q.getAlbumsByArtistStmt, err = db.PrepareContext(ctx, getAlbumsByArtist); err != nil {
		return nil, fmt.Errorf("error preparing query GetAlbumsByArtist: %w", err)
	}
	if q.getAlbumsByFullTextSearchStmt, err = db.PrepareContext(ctx, getAlbumsByFullTextSearch); err != nil {
		return nil, fmt.Errorf("error preparing query GetAlbumsByFullTextSearch: %w", err)
	}
	if q.updateAlbumStmt, err = db.PrepareContext(ctx, updateAlbum); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAlbum: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAlbumStmt != nil {
		if cerr := q.createAlbumStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAlbumStmt: %w", cerr)
		}
	}
	if q.deleteAlbumStmt != nil {
		if cerr := q.deleteAlbumStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAlbumStmt: %w", cerr)
		}
	}
	if q.getAlbumByIDStmt != nil {
		if cerr := q.getAlbumByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAlbumByIDStmt: %w", cerr)
		}
	}
	if q.getAlbumByTitleStmt != nil {
		if cerr := q.getAlbumByTitleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAlbumByTitleStmt: %w", cerr)
		}
	}
	if q.getAlbumsStmt != nil {
		if cerr := q.getAlbumsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAlbumsStmt: %w", cerr)
		}
	}
	if q.getAlbumsByArtistStmt != nil {
		if cerr := q.getAlbumsByArtistStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAlbumsByArtistStmt: %w", cerr)
		}
	}
	if q.getAlbumsByFullTextSearchStmt != nil {
		if cerr := q.getAlbumsByFullTextSearchStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAlbumsByFullTextSearchStmt: %w", cerr)
		}
	}
	if q.updateAlbumStmt != nil {
		if cerr := q.updateAlbumStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAlbumStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createAlbumStmt               *sql.Stmt
	deleteAlbumStmt               *sql.Stmt
	getAlbumByIDStmt              *sql.Stmt
	getAlbumByTitleStmt           *sql.Stmt
	getAlbumsStmt                 *sql.Stmt
	getAlbumsByArtistStmt         *sql.Stmt
	getAlbumsByFullTextSearchStmt *sql.Stmt
	updateAlbumStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createAlbumStmt:               q.createAlbumStmt,
		deleteAlbumStmt:               q.deleteAlbumStmt,
		getAlbumByIDStmt:              q.getAlbumByIDStmt,
		getAlbumByTitleStmt:           q.getAlbumByTitleStmt,
		getAlbumsStmt:                 q.getAlbumsStmt,
		getAlbumsByArtistStmt:         q.getAlbumsByArtistStmt,
		getAlbumsByFullTextSearchStmt: q.getAlbumsByFullTextSearchStmt,
		updateAlbumStmt:               q.updateAlbumStmt,
	}
}
